@model FrontEnd.Models.ViewModels.InfractorViewModel
@{
    ViewBag.Title = "Editar Infractor";
}

<div class="container bg-light text-dark border" style=" height: auto; min-height: 80vh; padding-bottom: 20px; margin-bottom: 28px; word-wrap: break-word;">
    <div style="text-align:center;">
        <h1 class="display-5">@ViewBag.Title</h1>
    </div>
    <hr />

    @using (Html.BeginForm("Editar", "Infractor", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(d => d.IdInfractor)
        @Html.HiddenFor(d => d.Imagen)
        <div class="row mb-4">
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.TipoIdentificacion)
                @Html.DropDownListFor(d => d.TipoIdentificacion, Model.TiposDeIdentificacion, "--Seleccione--", new { @class = "form-select" })
                @Html.ValidationMessageFor(d => d.TipoIdentificacion, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.Identificacion)
                @Html.TextBoxFor(d => d.Identificacion, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[0-9a-zA-ZÁÉÍÓÚáéíóú]/i.test(event.key)", @autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.Identificacion, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-6 position-relative">
                @Html.LabelFor(d => d.Nombre)
                @Html.TextBoxFor(d => d.Nombre, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[a-z,A-Z ÁÉÍÓÚáéíóú]/i.test(event.key)", autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.Nombre, null, new { @class = "red" })
            </div>
        </div>
        <div class="row mb-4">
            <div class="form-group col-md-2 position-relative">
                @Html.LabelFor(d => d.FechaNacimiento)
                @Html.EditorFor(d => d.FechaNacimiento, "", new { @class = "form-control" })
                @Html.ValidationMessageFor(d => d.FechaNacimiento, "", new { @class = "red" })
            </div>
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.Telefono)
                @Html.TextBoxFor(d => d.Telefono, "", new { @class = "form-control", @autocomplete = "new-password", @maxlength = "9", @onfocusout = "LimpiaGuion(this)", @onKeyup = " ValidarTelefono(this)" })
                @Html.ValidationMessageFor(d => d.Telefono, "", new { @class = "red" })
            </div>
            <div class="form-group col-md-2 position-relative">
                @Html.LabelFor(d => d.Sexo)
                @Html.DropDownListFor(d => d.Sexo, Model.TiposDeSexo, "--Seleccione--", new { @class = "form-select" })
                @Html.ValidationMessageFor(d => d.Sexo, null, new { @class = "red" })
            </div>

            <div class="form-group col-md-2 position-relative">
                @Html.LabelFor(d => d.Estatura)
                @Html.TextBoxFor(d => d.Estatura, "", new { @class = "form-control inputheight", @maxlength = "4", @style = "text-transform:uppercase", @onkeyup = "ValidateHeight(this)" })
                @Html.ValidationMessageFor(d => d.Estatura, null, new { @class = "red" })

            </div>
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.Nacionalidad)
                @Html.DropDownListFor(d => d.Nacionalidad, Model.Nacionalidades, "--Seleccione--", new { @class = "form-select" })
                @Html.ValidationMessageFor(d => d.Nacionalidad, null, new { @class = "red" })
            </div>
        </div>
        <div class="row mb-4">
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.ProfesionUOficio)
                @Html.TextBoxFor(d => d.ProfesionUOficio, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[0-9a-zA-Z]/i.test(event.key)" })
                @Html.ValidationMessageFor(d => d.ProfesionUOficio, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-4 position-relative">
                @Html.LabelFor(d => d.CorreoElectronico)
                @Html.TextBoxFor(d => d.CorreoElectronico, "", new { @class = "form-control", @autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.CorreoElectronico, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-5 position-relative">
                @Html.LabelFor(d => d.DireccionExacta)
                @Html.TextAreaFor(d => d.DireccionExacta, new { @class = "form-control", @style = "text-transform:uppercase" })
                @Html.ValidationMessageFor(d => d.DireccionExacta, null, new { @class = "red" })
            </div>
        </div>
        <div class="row mb-4">
            <div class="form-group col-md-3 position-relative">
                @Html.LabelFor(d => d.ApodoInfractor)
                @Html.TextBoxFor(d => d.ApodoInfractor, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[a-z,A-Z ,Á,á,é,É,í,Í,ó,Ó,ú,Ú]/i.test(event.key)" })
                @Html.ValidationMessageFor(d => d.ApodoInfractor, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-4 position-relative">
                @Html.LabelFor(d => d.NombrePadre)
                @Html.TextBoxFor(d => d.NombrePadre, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[a-z,A-Z ,Á,á,é,É,í,Í,ó,Ó,ú,Ú]/i.test(event.key)" })
                @Html.ValidationMessageFor(d => d.NombrePadre, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-5 position-relative">
                @Html.LabelFor(d => d.NombreMadre)
                @Html.TextBoxFor(d => d.NombreMadre, "", new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[a-z,A-Z ,Á,á,é,É,í,Í,ó,Ó,ú,Ú]/i.test(event.key)" })
                @Html.ValidationMessageFor(d => d.NombreMadre, null, new { @class = "red" })
            </div>
        </div>
        <div class="row mb-4">
            <div class="form-group col-md-4 position-relative">
                @Html.LabelFor(d => d.RasgosFisicos)
                @Html.TextAreaFor(d => d.RasgosFisicos, new { @class = "form-control", @style = "text-transform:uppercase", @onkeydown = "return /[0-9a-zA-Z ,.-]/i.test(event.key)", @autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.RasgosFisicos, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-4 position-relative">
                @Html.LabelFor(d => d.Tatuajes)
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="checkboxTatuajes" onclick="aparecerTatuajes()">
                    <label class="form-check-label" for="exampleCheck1">Aplica</label>
                </div>
                @Html.TextAreaFor(d => d.Tatuajes, new { @class = "form-control", @id = "nombreTatuajes", @style = "display:none;text-transform:uppercase", @onkeydown = "return /[0-9a-zA-Z ,.-]/i.test(event.key)", @autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.Tatuajes, null, new { @class = "red" })
            </div>
            <div class="form-group col-md-4 position-relative">
                @Html.LabelFor(d => d.Observaciones)
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="checkboxObservaciones" onclick="aparecerObservaciones()">
                    <label class="form-check-label" for="exampleCheck1">Aplica</label>
                </div>
                @Html.TextAreaFor(d => d.Observaciones, new { @class = "form-control", @id = "Obs", @style = "display:none;text-transform:uppercase", @onkeydown = "return /[0-9a-zA-Z ,.-]/i.test(event.key)", @autocomplete = "new-password" })
                @Html.ValidationMessageFor(d => d.Observaciones, null, new { @class = "red" })
            </div>
        </div>
        <div class="row mb-4">
            <div class="form-group col-md-2 position-relative">
                @Html.LabelFor(d => d.Archivo)
                @Html.TextBoxFor(d => d.Archivo, new { @type = "file", accept = ".jpg , .png", @id = "uploadfile" })
                @Html.ValidationMessageFor(d => d.Archivo, "", new { @class = "red" })
                <span id="error"></span>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="form-group col-md-12">
                <div style="text-align:center;">
                    <a class="btn btn-secondary" href="~/Infractor/Detalle/@Model.IdInfractor">Cancelar</a>
                    <a class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#show">Guardar</a>
                </div>
            </div>
        </div>

        <div class="modal fade" id="show" tabindex="-1" aria-labelledby="showLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="showLabel">Editar un Infractor</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" />
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro que editar los datos del infractor?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-danger" id="Cancel" data-dismiss="modal">Cancelar</button>
                        <button type="submit" class="btn btn-primary" id="btnSave">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script>
    function ValidarTelefono(f) {
        var r = /(\D+)/g,
            first4 = '',
            last4 = '';
        f.value = f.value.replace(r, '');
        first4 = f.value.substr(0, 4);
        last4 = f.value.substr(4, 8);
        f.value = first4 + '-' + last4;

    }
    function LimpiaGuion(f) {
        if (f.value.length <= 1) {
            f.value = "";
        }
    }



    function aparecerObservaciones() {
        var checkBox = document.getElementById("checkboxObservaciones");
        var text = document.getElementById("Obs");
        if (checkBox.checked == true) {
            text.style.display = "block";
        } else {
            text.style.display = "none";
        }
    }

    function aparecerPadre() {
        var checkBox = document.getElementById("checkboxPadre");
        var text = document.getElementById("nombrePadre");
        if (checkBox.checked == true) {
            text.style.display = "block";
        } else {
            text.style.display = "none";
        }
    }

    function aparecerMadre() {
        var checkBox = document.getElementById("checkboxMadre");
        var text = document.getElementById("nombreMadre");
        if (checkBox.checked == true) {
            text.style.display = "block";
        } else {
            text.style.display = "none";
        }
    }

    function aparecerTatuajes() {
        var checkBox = document.getElementById("checkboxTatuajes");
        var text = document.getElementById("nombreTatuajes");
        if (checkBox.checked == true) {
            text.style.display = "block";
        } else {
            text.style.display = "none";
        }
    }
</script>